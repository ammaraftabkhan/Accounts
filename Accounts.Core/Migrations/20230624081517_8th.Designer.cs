// <auto-generated />
using System;
using Accounts.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Accounts.Core.Migrations
{
    [DbContext(typeof(AccuteDbContext))]
    [Migration("20230624081517_8th")]
    partial class _8th
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Accounts.Core.Models.AccountContact", b =>
                {
                    b.Property<long>("AcContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcContactId"), 1L, 1);

                    b.Property<long>("AcProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cell1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cell2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ntn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NTN");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Strn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STRN");

                    b.Property<string>("Tel1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tel2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcContactId")
                        .HasName("PK_Contact");

                    b.HasIndex("AcProfileId");

                    b.ToTable("AccountContact");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountControl", b =>
                {
                    b.Property<long>("AcControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcControlId"), 1L, 1);

                    b.Property<string>("AcControlCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcControlName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AcHeadId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcControlId")
                        .HasName("PK_Controls");

                    b.HasIndex("AcHeadId");

                    b.ToTable("AccountControls");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountFiscalYear", b =>
                {
                    b.Property<long>("FiscalYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FiscalYearId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FiscalYearCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FiscalYearEnd")
                        .HasColumnType("date");

                    b.Property<string>("FiscalYearName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FiscalYearStart")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("FiscalYearId")
                        .HasName("PK_FiscalYear");

                    b.ToTable("AccountFiscalYear");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountHead", b =>
                {
                    b.Property<long>("AcHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcHeadId"), 1L, 1);

                    b.Property<string>("AcHeadCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcHeadName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AcHeadTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcHeadId")
                        .HasName("PK_Heads");

                    b.HasIndex("AcHeadTypeId");

                    b.ToTable("AccountHeads");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountHeadType", b =>
                {
                    b.Property<int>("AcHeadTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcHeadTypeId"), 1L, 1);

                    b.Property<string>("AcHeadTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcHeadTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcHeadTypeId");

                    b.ToTable("AccountHeadType");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountLedger", b =>
                {
                    b.Property<long>("AcLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcLedgerId"), 1L, 1);

                    b.Property<long?>("AcControlId")
                        .HasColumnType("bigint");

                    b.Property<string>("AcLedgerCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcLedgerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Createdby")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcLedgerId")
                        .HasName("PK_Ledgers");

                    b.HasIndex("AcControlId");

                    b.ToTable("AccountLedger");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountProfile", b =>
                {
                    b.Property<long>("AcProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcProfileId"), 1L, 1);

                    b.Property<long>("AcLedgerId")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cell1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cell2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChqName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Ntn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NTN");

                    b.Property<int>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Strn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STRN");

                    b.Property<string>("Tel1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tel2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcProfileId")
                        .HasName("PK_Profile");

                    b.HasIndex("AcLedgerId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("AccountProfile");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountSubLedger", b =>
                {
                    b.Property<long>("AcSubLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcSubLedgerId"), 1L, 1);

                    b.Property<long>("AcLedgerId")
                        .HasColumnType("bigint");

                    b.Property<string>("AcSubLedgerCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AcSubLedgerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcSubLedgerId")
                        .HasName("PK_SubLedgers");

                    b.HasIndex("AcLedgerId");

                    b.ToTable("AccountSubLedger");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransDetail", b =>
                {
                    b.Property<long>("AcTransDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcTransDetailId"), 1L, 1);

                    b.Property<long>("AcTransMasterId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("ChqDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChqNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PayeeAcContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("PayeeAcLedgerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PayeeAcSubLedgerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PayeeRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("ReceiverAcContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiverAcLedgerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiverAcSubLedgerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiverRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcTransDetailId")
                        .HasName("PK_AccountTransactionDetail");

                    b.HasIndex("AcTransMasterId");

                    b.ToTable("AccountTransDetail");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransMaster", b =>
                {
                    b.Property<long>("AcTransMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcTransMasterId"), 1L, 1);

                    b.Property<string>("AcDocNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AcTransDate")
                        .HasColumnType("date");

                    b.Property<int>("AcTransTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("FiscalYearId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcTransMasterId");

                    b.HasIndex("AcTransTypeId");

                    b.ToTable("AccountTransMaster");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransType", b =>
                {
                    b.Property<int>("AcTransTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcTransTypeId"), 1L, 1);

                    b.Property<string>("AcTransTypeCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("AcTransTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcTransTypeId")
                        .HasName("PK_CV");

                    b.ToTable("AccountTransType");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherDetail", b =>
                {
                    b.Property<long>("AcVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcVoucherId"), 1L, 1);

                    b.Property<long>("AcLedgerId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcSubLedgerId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcVoucherMasterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(19,4)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcVoucherId")
                        .HasName("PK_AcVoucher");

                    b.HasIndex("AcVoucherMasterId");

                    b.ToTable("AccountVoucherDetail");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherMaster", b =>
                {
                    b.Property<long>("AcVoucherMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcVoucherMasterId"), 1L, 1);

                    b.Property<string>("AcDocNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AcTransDate")
                        .HasColumnType("date");

                    b.Property<int>("AcVoucherTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("FiscalYearId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcVoucherMasterId");

                    b.HasIndex("AcVoucherTypeId");

                    b.ToTable("AccountVoucherMaster");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherType", b =>
                {
                    b.Property<int>("AcVoucherTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcVoucherTypeId"), 1L, 1);

                    b.Property<string>("AcVoucherTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AcVoucherTypeId");

                    b.ToTable("AccountVoucherType");
                });

            modelBuilder.Entity("Accounts.Core.Models.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddressId"), 1L, 1);

                    b.Property<long?>("AcContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AcProfileId")
                        .HasColumnType("bigint");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<long>("CivilEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Line1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Line2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Line3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Line4")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Line5")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Long")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AddressId");

                    b.HasIndex("AcContactId");

                    b.HasIndex("AcProfileId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CivilEntityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Accounts.Core.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("Accounts.Core.Models.Area", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AreaId"), 1L, 1);

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AreaId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Accounts.Core.Models.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityId"), 1L, 1);

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCodeSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("StateProvinceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntitiesCurrency", b =>
                {
                    b.Property<int>("CivilEntitiesCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CivilEntitiesCurrencyId"), 1L, 1);

                    b.Property<long>("CivilEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CivilEntitiesCurrencyId");

                    b.HasIndex("CivilEntityId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CivilEntitiesCurrencies");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntitiesLanguage", b =>
                {
                    b.Property<int>("CivilEntitiessLanguagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CivilEntitiessLanguagesId"), 1L, 1);

                    b.Property<long>("CivilEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CivilEntitiessLanguagesId");

                    b.HasIndex("CivilEntityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CivilEntitiesLanguages");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntity", b =>
                {
                    b.Property<long>("CivilEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CivilEntityId"), 1L, 1);

                    b.Property<string>("CivilEntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivilLevelId")
                        .HasColumnType("int");

                    b.Property<long?>("CivilParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FlagImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CivilEntityId");

                    b.HasIndex("CivilLevelId");

                    b.ToTable("CivilEntities");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilLevel", b =>
                {
                    b.Property<int>("CivilLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CivilLevelId"), 1L, 1);

                    b.Property<string>("CivilLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CivilLevelId");

                    b.ToTable("CivilLevels");
                });

            modelBuilder.Entity("Accounts.Core.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Accounts.Core.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencySign")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Accounts.Core.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalRows")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Accounts.Core.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductCategoryCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Accounts.Core.Models.ProductSubCategory", b =>
                {
                    b.Property<int>("ProductSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSubCategoryId"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<long>("ProductSubCategoryCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductSubCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("ProductSubCategoryId");

                    b.ToTable("ProductSubCategory");
                });

            modelBuilder.Entity("Accounts.Core.Models.StateProvince", b =>
                {
                    b.Property<long>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateProvinceId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("StateProvinceId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("Accounts.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PostedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountContact", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountProfile", "AcProfile")
                        .WithMany("AccountContacts")
                        .HasForeignKey("AcProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountContact_AccountProfile");

                    b.Navigation("AcProfile");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountControl", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountHead", "AcHead")
                        .WithMany("AccountControls")
                        .HasForeignKey("AcHeadId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountControls_AccountHeads");

                    b.Navigation("AcHead");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountHead", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountHeadType", "AcHeadType")
                        .WithMany("AccountHeads")
                        .HasForeignKey("AcHeadTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountHeads_AccountHeadType");

                    b.Navigation("AcHeadType");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountLedger", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountControl", "AcControl")
                        .WithMany("AccountLedgers")
                        .HasForeignKey("AcControlId")
                        .HasConstraintName("FK_AccountLedger_AccountControls");

                    b.Navigation("AcControl");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountProfile", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountLedger", "AcLedger")
                        .WithMany("AccountProfiles")
                        .HasForeignKey("AcLedgerId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountProfile_AccountLedger");

                    b.HasOne("Accounts.Core.Models.Currency", "Currency")
                        .WithMany("AccountProfiles")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountProfile_Currencies");

                    b.Navigation("AcLedger");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountSubLedger", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountLedger", "AcLedger")
                        .WithMany("AccountSubLedgers")
                        .HasForeignKey("AcLedgerId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountSubLedger_AccountLedger");

                    b.Navigation("AcLedger");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransDetail", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountTransMaster", "AcTransMaster")
                        .WithMany("AccountTransDetails")
                        .HasForeignKey("AcTransMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountTransDetail_AccountTransMaster");

                    b.Navigation("AcTransMaster");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransMaster", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountTransType", "AcTransType")
                        .WithMany("AccountTransMasters")
                        .HasForeignKey("AcTransTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountTransMaster_AccountTransType");

                    b.Navigation("AcTransType");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherDetail", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountVoucherMaster", "AcVoucherMaster")
                        .WithMany("AccountVoucherDetails")
                        .HasForeignKey("AcVoucherMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountVoucherDetail_AccountVoucherMaster1");

                    b.Navigation("AcVoucherMaster");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherMaster", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountVoucherType", "AcVoucherType")
                        .WithMany("AccountVoucherMasters")
                        .HasForeignKey("AcVoucherTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountVoucherMaster_AccountVoucherType");

                    b.Navigation("AcVoucherType");
                });

            modelBuilder.Entity("Accounts.Core.Models.Address", b =>
                {
                    b.HasOne("Accounts.Core.Models.AccountContact", "AcContact")
                        .WithMany("Addresses")
                        .HasForeignKey("AcContactId")
                        .HasConstraintName("FK_Address_AccountContact");

                    b.HasOne("Accounts.Core.Models.AccountProfile", "AcProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("AcProfileId")
                        .HasConstraintName("FK_Address_AccountProfile");

                    b.HasOne("Accounts.Core.Models.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_AddressType");

                    b.HasOne("Accounts.Core.Models.CivilEntity", "CivilEntity")
                        .WithMany("Addresses")
                        .HasForeignKey("CivilEntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_CivilEntities");

                    b.Navigation("AcContact");

                    b.Navigation("AcProfile");

                    b.Navigation("AddressType");

                    b.Navigation("CivilEntity");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntitiesCurrency", b =>
                {
                    b.HasOne("Accounts.Core.Models.CivilEntity", "CivilEntity")
                        .WithMany("CivilEntitiesCurrencies")
                        .HasForeignKey("CivilEntityId")
                        .IsRequired()
                        .HasConstraintName("FK_CivilEntitiesCurrencies_CivilEntities");

                    b.HasOne("Accounts.Core.Models.Currency", "Currency")
                        .WithMany("CivilEntitiesCurrencies")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CivilEntitiesCurrencies_Currencies");

                    b.Navigation("CivilEntity");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntitiesLanguage", b =>
                {
                    b.HasOne("Accounts.Core.Models.CivilEntity", "CivilEntity")
                        .WithMany("CivilEntitiesLanguages")
                        .HasForeignKey("CivilEntityId")
                        .IsRequired()
                        .HasConstraintName("FK_CivilEntitiesLanguages_CivilEntities");

                    b.HasOne("Accounts.Core.Models.Language", "Language")
                        .WithMany("CivilEntitiesLanguages")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_CivilEntitiesLanguages_Languages");

                    b.Navigation("CivilEntity");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntity", b =>
                {
                    b.HasOne("Accounts.Core.Models.CivilLevel", "CivilLevel")
                        .WithMany("CivilEntities")
                        .HasForeignKey("CivilLevelId")
                        .IsRequired()
                        .HasConstraintName("FK_CivilEntities_CivilLevels");

                    b.Navigation("CivilLevel");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountContact", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountControl", b =>
                {
                    b.Navigation("AccountLedgers");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountHead", b =>
                {
                    b.Navigation("AccountControls");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountHeadType", b =>
                {
                    b.Navigation("AccountHeads");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountLedger", b =>
                {
                    b.Navigation("AccountProfiles");

                    b.Navigation("AccountSubLedgers");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountProfile", b =>
                {
                    b.Navigation("AccountContacts");

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransMaster", b =>
                {
                    b.Navigation("AccountTransDetails");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountTransType", b =>
                {
                    b.Navigation("AccountTransMasters");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherMaster", b =>
                {
                    b.Navigation("AccountVoucherDetails");
                });

            modelBuilder.Entity("Accounts.Core.Models.AccountVoucherType", b =>
                {
                    b.Navigation("AccountVoucherMasters");
                });

            modelBuilder.Entity("Accounts.Core.Models.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CivilEntitiesCurrencies");

                    b.Navigation("CivilEntitiesLanguages");
                });

            modelBuilder.Entity("Accounts.Core.Models.CivilLevel", b =>
                {
                    b.Navigation("CivilEntities");
                });

            modelBuilder.Entity("Accounts.Core.Models.Currency", b =>
                {
                    b.Navigation("AccountProfiles");

                    b.Navigation("CivilEntitiesCurrencies");
                });

            modelBuilder.Entity("Accounts.Core.Models.Language", b =>
                {
                    b.Navigation("CivilEntitiesLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
